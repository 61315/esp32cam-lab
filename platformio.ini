; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
src_dir = src

[env]
platform = espressif32
board = esp32dev  
board_build.flash_mode = dio
board_build.f_flash = 40000000L
board_build.flash_size = 4MB
; board_build.partitions = huge_app.csv
board_upload.flash_size = 4MB
monitor_speed = 115200
monitor_rts = 0
monitor_dtr = 0
test_speed = 115200
upload_speed = 921600
build_flags = 
	-DBOARD_HAS_PSRAM
	-DCORE_DEBUG_LEVEL=5
	; -mfix-esp32-psram-cache-issue
	-DCONFIG_SPIRAM_CACHE_WORKAROUND
    ; -DCONFIG_ESP32_SPIRAM_SUPPORT=false
    ; -DCONFIG_SPIRAM_USE=0


; hello
[env:hello_world] 
framework = arduino
build_src_filter = +<hello_world.cpp>

; hardware info
[env:system_info] 
framework = arduino
build_src_filter = +<system_info.cpp>

; led blinking
[env:blink] 
framework = arduino
build_src_filter = +<blink.cpp>

; wifi host test
[env:basic_wifi_server] 
framework = arduino
build_src_filter = +<basic_wifi_server.cpp>

; wifi endpoint test
[env:basic_wifi_endpoint] 
framework = arduino
build_src_filter = +<basic_wifi_endpoint.cpp>

; simple camera capture demo
[env:take_picture] 
framework = arduino
build_src_filter = +<take_picture.cpp>

; external components usage. simple fft routine with `esp-dsp`
[env:basic_math]
framework = arduino
build_src_filter = +<basic_math.cpp>

; multicore basic
[env:dual_core_test1] 
framework = arduino
build_src_filter = +<dual_core_test1.cpp>

; baseline
[env:heavy_task_serial] 
framework = arduino
build_src_filter = +<heavy_task_serial.cpp>

; multicore
[env:heavy_task_parallel] 
framework = arduino
build_src_filter = +<heavy_task_parallel.cpp>

; same thing but write is under mutex, so log is not mangled by race condition
[env:heavy_task_parallel_mutex] 
framework = arduino
build_src_filter = +<heavy_task_parallel_mutex.cpp>

; hand rolled fft
[env:math_fft_naive] 
framework = arduino
build_src_filter = +<math_fft_naive.cpp>

; fft with esp-dsp
[env:math_fft_dsp] 
framework = arduino
build_src_filter = +<math_fft_dsp.cpp>

; poor man's linear solve (Ax = b)
[env:math_dspm_matrix] 
framework = arduino
build_src_filter = +<dspm_matrix.cpp>

; blas 2
[env:math_dotprod_naive] 
framework = arduino
build_src_filter = +<math_dotprod_naive.cpp>

; blas 2 with dsp
[env:math_dotprod_dsp] 
framework = arduino
build_src_filter = +<math_dotprod_dsp.cpp>

; fun with camera 
[env:stream_over_wifi] 
framework = arduino
build_src_filter = +<stream_over_wifi.cpp>

; measure image capture per seconds
[env:camera_throughput] 
framework = arduino
build_src_filter = +<camera_throughput.cpp>

; measure gray2jpg or jpg2gray conversion per seconds 
[env:converter_throughput] 
framework = arduino
build_src_filter = +<converter_throughput.cpp>
board_build.embed_files = 
	assets/qqvga_gray.bin ; 19,200 bytes
	assets/qvga_gray.bin ; 28,800 bytes
	; assets/qqvga_jpeg.bin
	; assets/qvga_jpeg.bin
lib_deps = esp32-camera

;;;;;;;;spi fun;;;;;;;;
[env:spi_hello1_master] 
framework = arduino
build_src_filter = +<spi_hello1_master.cpp>

[env:spi_hello1_slave] 
framework = arduino
build_src_filter = +<spi_hello1_slave.cpp>

[env:spi_hello2_master] 
framework = arduino
build_src_filter = +<spi_hello2_master.cpp>

[env:spi_hello2_slave] 
framework = arduino
build_src_filter = +<spi_hello2_slave.cpp>

[env:spi_hello3_master] 
framework = arduino
build_src_filter = +<spi_hello3_master.cpp>

[env:spi_hello3_slave] 
framework = arduino
build_src_filter = +<spi_hello3_slave.cpp>

[env:generate_bitmap]
framework = arduino
build_src_filter = +<generate_bitmap.cpp>
lib_deps = 
	adafruit/Adafruit GFX Library@^1.11.11

[env:bitmap_over_wifi]
framework = arduino
build_src_filter = +<bitmap_over_wifi.cpp>
lib_deps = 
	adafruit/Adafruit GFX Library@^1.11.11

[env:spi_bitmap1_master]
framework = arduino
build_src_filter = +<spi_bitmap1_master.cpp>

[env:spi_bitmap1_slave]
framework = arduino
build_src_filter = +<spi_bitmap1_slave.cpp>
lib_deps = 
	adafruit/Adafruit GFX Library@^1.11.11

[env:idf_hello_world]
framework = espidf
; debug_tool = olimex-arm-usb-ocd-h
; build_flags = 
;     -DIDF_SRC_FILE=\"basic_math.c\"
